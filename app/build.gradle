import java.text.DateFormat
import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

boolean isBuildModuleProfile = project.hasProperty('isBuildModuleProfile') ? project.property('isBuildModuleProfile').toBoolean() : true
boolean isBuildModuleSample = project.hasProperty('isBuildModuleSample') ? project.property('isBuildModuleSample').toBoolean() : true
boolean isBuildModuleNetworkConfig = project.hasProperty('isBuildModuleNetworkConfig') ? project.property('isBuildModuleNetworkConfig').toBoolean() : true

def isBuildAll = isBuildModuleSample && isBuildModuleProfile


android {
    compileSdkVersion android_config["compileSdkVersion"]
    buildToolsVersion android_config["buildToolsVersion"]

    defaultConfig {
        applicationId android_config["applicationId"]
        minSdkVersion android_config["minSdkVersion"]
        targetSdkVersion android_config["targetSdkVersion"]
        versionCode android_config["versionCode"]
        versionName android_config["versionName"]
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        buildConfigField 'boolean', 'UNI_APP', isBuildAll.toString()

        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation android_dependencies["constraintlayout"]
    implementation android_dependencies["hilt-lifecycle-viewmodel"]
    implementation android_dependencies["hilt-android"]
    kapt android_dependencies["hilt-android-compiler"]
    kapt android_dependencies["hilt-compiler"]
    implementation android_dependencies["appcompat"]
    implementation android_dependencies["recyclerview"]
    implementation android_dependencies["multidex"]
    kapt third_libs["arouter-compiler"]

    /*********************模块是否参加编译逻辑******************************/

    if (isBuildModuleProfile) {
        implementation project(path: ':module_profile')
    }

    if (isBuildModuleSample) {
        implementation project(path: ':module_sample')
    }

    if (isBuildModuleNetworkConfig) {
        implementation(name: 'lib_network_config', ext: 'aar')
    }
}


static def getDateTime() {
    DateFormat df = new SimpleDateFormat("YYMMddHHmm")

    return df.format(new Date())
}

/*******************gradle 编译优化**************************/

/*1.移除不必要的task,降低编译时间*/
tasks.whenTaskAdded { task ->
    if (task.name.contains("Lint") || task.name.contains("mockableAndroidJar") || task.name.contains("UnitTest") || task.name.contains("AndroidTest")) {
        task.enabled = false
    }
}